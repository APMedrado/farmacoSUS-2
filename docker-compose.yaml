# Descomentar linhas para por volumes persistentes para ambiente de execução

services:
  mongo:
    image: mongo
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: pass
    ports:
      - "27017-27019:27017-27019"
#     volumes:
#       - mongo_data:/data/db
    networks:
      - backend_network
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
#     volumes:
#       - zookeeper_data:/var/lib/zookeeper
    networks:
      - backend_network

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#     volumes:
#       - kafka_data:/var/lib/kafka/data
    networks:
      - backend_network

  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - kafka
    command: python /app/manage.py runserver 0.0.0.0:8000
    networks:
      - backend_network

# volumes:
#   zookeeper_data:
#   kafka_data:
#   mongo_data:

networks:
  backend_network: